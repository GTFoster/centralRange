print(t)
}
plant_long <- pivot_longer(as.data.frame(p_pops_output), cols=3:ncol(p_pops_output), names_to="species", values_to = "popsize")
ggplot(data=plant_long, aes(x=V2, y=popsize, color=as.factor(species)))+geom_line()+facet_wrap("V1")
an_long <- pivot_longer(as.data.frame(a_pops_output), cols=3:ncol(a_pops_output), names_to="species", values_to = "popsize")
ggplot(data=an_long, aes(x=V2, y=popsize, color=as.factor(species)))+geom_line()+facet_wrap("V1")
plot(x=NA, y=NA, xlim=c(-1.5,1.5), ylim=c(0,10))
for(i in 1:length(a_traitM)){
lines(x=seq(-2, 2, by=0.01), y=dnorm(x=seq(-2, 2, by=0.01), mean=a_traitM[i], sd=a_traitV[i]), col="dark red")
}
for(i in 1:length(p_traitM)){
lines(x=seq(-2, 2, by=0.01), y=dnorm(x=seq(-2, 2, by=0.01), mean=p_traitM[i], sd=p_traitV[i]), col="dark green")
}
plot(x=NA, y=NA, xlim=c(-1.5,1.5), ylim=c(0,10))
for(i in (1:length(a_traitM))[colSums(a_pops)>0]){
lines(x=seq(-2, 2, by=0.01), y=dnorm(x=seq(-2, 2, by=0.01), mean=a_traitM[i], sd=a_traitV[i]), col="dark red")
}
for(i in (1:length(p_traitM))[colSums(p_pops)>0]){
lines(x=seq(-2, 2, by=0.01), y=dnorm(x=seq(-2, 2, by=0.01), mean=p_traitM[i], sd=p_traitV[i]), col="dark green")
}
(1:length(a_traitM))[colSums(a_pops)>0]
poplong <- pivot_longer(pops, cols = 1:(n_plants+n_animals), names_to="species", values_to = "popsize")
plot(x=NA, y=NA, xlim=c(-1.5,1.5), ylim=c(0,10))
for(i in 1:length(a_traitM)){
lines(x=seq(-2, 2, by=0.01), y=dnorm(x=seq(-2, 2, by=0.01), mean=a_traitM[i], sd=a_traitV[i]), col="dark red")
}
for(i in 1:length(p_traitM)){
lines(x=seq(-2, 2, by=0.01), y=dnorm(x=seq(-2, 2, by=0.01), mean=p_traitM[i], sd=p_traitV[i]), col="dark green")
}
plot(x=NA, y=NA, xlim=c(-1.5,1.5), ylim=c(0,10))
for(i in (1:length(a_traitM))[colSums(a_pops)>0]){
lines(x=seq(-2, 2, by=0.01), y=dnorm(x=seq(-2, 2, by=0.01), mean=a_traitM[i], sd=a_traitV[i]), col="dark red")
}
for(i in (1:length(p_traitM))[colSums(p_pops)>0]){
lines(x=seq(-2, 2, by=0.01), y=dnorm(x=seq(-2, 2, by=0.01), mean=p_traitM[i], sd=p_traitV[i]), col="dark green")
}
(1:length(a_traitM))[colSums(a_pops)>0]
py_list <- r_to_py(list(1, 2, 3))
``` r
# Install the dplyr package from CRAN
install.packages("dplyr")
install.packages("dplyr")
reticulate::repl_python()
reticulate::repl_python()
# Install the pandas package from Anaconda
yes
load("/home/grantfoster/Downloads/dv.RData")
knitr::opts_chunk$set(echo = TRUE)
library(rgbif)
install.packages(c("rgbif", "maps", "raster"))
library(rgbif)
library(maps)
library(raster)
library(raster)
install.packages("terra")
knitr::opts_chunk$set(echo = TRUE)
install.packages("learnPopGen") #This can run some simle genetic simulations
install.packages("markdown") #This helps us create pretty rmarkdown documents, which we'll talk about in class
install.packages("knitr") #Again, helpful for rmarkdown documents
install.packages("vegan") #This package contains a bunch of really useful functions for common, basic ecological analyses
install.packages("knitr")
install.packages("tidyverse") #A huge set of packages that allow us to plot and manipulate data in easy ways
install.packages("tidyverse")
library(learnPopGen)
library(markdown)
library(knitr)
library(vegan)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
Expectations <- read.csv(file="Model_Results.csv")[,-1]
noPred <- data.frame(gen=c(0,2,4,5), WT=c(20,233,266,NA), V=c(80,95,10,NA))
View(Expectations)
knitr::opts_chunk$set(echo = TRUE)
library(rjson)
library(tidyverse)
# define the base url
base_url <- "https://www.web-of-life.es/"
json_url2 <- paste0(base_url,"get_networks.php?interaction_type=Pollination")
WolPols <- jsonlite::fromJSON(json_url2)
length(unique(WolPols$network_name)) # 166 Networks
WolMeta <- read.csv(paste0(base_url,"get_network_info.php"))
# show results
head(WolMeta) # %>% formattable()
colnames(WolMeta)
WolMeta <- WolMeta %>% dplyr::filter(., network_type%in%"Pollination")
length(unique(WolMeta$network_name))
table(unique(WolPols$network_name)%in%WolMeta$network_name)
table(WolMeta$region)
amPol <- WolMeta %>% dplyr::select(., network_name, region, latitude, longitude) %>% left_join(WolPols, ., by="network_name") %>% dplyr::filter(., region=="Americas")
length(unique(amPol$network_name))
table(amPol$species1 %in% amPol$species2)
amPlants <- amPol %>% dplyr::select(., network_name, species1) %>% unique() #All the unique plant-site combinations in us
amPollinators <- amPol %>% dplyr::select(., network_name, species2) %>% unique() #All the unique poll-site combinations in us
sum(table(rowSums(table(amPlants$species1, amPlants$network_name))))-sum(table(rowSums(table(amPlants$species1, amPlants$network_name)))[1:5])
sum(table(rowSums(table(amPollinators$species2, amPollinators$network_name))))-sum(table(rowSums(table(amPollinators$species2, amPollinators$network_name)))[1:5])
library(rmangal)
mgs <- rmangal::search_datasets("pollinator")
mgn <- get_collection(mgs)
load("data/Mangel_Wol_Query.Rda")
cols <- colnames(mgn[[1]]$nodes)[1:18] #Just match the basic columns that all networks should have (extra "taxonomy" col in some to exclude, if not others)
mgnNodes <- NULL
for(i in 1:length(mgn)){
temp <- mgn[[i]]$nodes %>% dplyr::select(., all_of(cols))
mgnNodes <- rbind(mgnNodes, temp)
}
(length(unique(mgnNodes$network_id)))==324 #Check we actually have all the networks
MangelCounts <- mgnNodes %>% dplyr::group_by(., taxonomy.id) %>% dplyr::summarise(., networks=length(unique(network_id)))
mgnNodes$original_name[mgnNodes$taxonomy.id%in% 5038][1]
LiNets <- dplyr::filter(mgnNodes, taxonomy.name=="Lasioglossum incompletum") %>% dplyr::select(., network_id) %>% unique()
HtNets <- dplyr::filter(mgnNodes, taxonomy.name=="Halictus tripartitus") %>% dplyr::select(., network_id) %>% unique()
#These are different
x <- mgn[[8]]$interactions
y <- mgn[[8]]$nodes
cols <- c(colnames(mgn[[1]]$interactions)[1:6],"network_id")
mgnInt <- NULL
for(i in 1:length(mgn)){
temp <- mgn[[i]]$interactions %>% dplyr::select(., all_of(cols))
mgnInt <- rbind(mgnInt, temp)
}
mgnInt <- mgnInt %>% dplyr::rename(., node_from=node_id)
mgnInt
mgnInt <- mgnInt %>% dplyr::rename(., node_from=node_id)
mgnInt <- mgnInt %>% dplyr::rename(., node_id=node_from)
mgnInt <- dplyr::select(mgnNodes, node_id, taxonomy.id, taxonomy.name) %>% dplyr::rename(., node_from=node_id, taxonomy.id.from=taxonomy.id, taxonomy.name.from=taxonomy.name) %>% left_join(mgnInt, ., by="node_from") #Adding the node_from taxa ID
mgnInt
mgnInt <- NULL
for(i in 1:length(mgn)){
temp <- mgn[[i]]$interactions %>% dplyr::select(., all_of(cols))
mgnInt <- rbind(mgnInt, temp)
}
mgnInt <- dplyr::select(mgnNodes, node_id, taxonomy.id, taxonomy.name) %>% dplyr::rename(., node_from=node_id, taxonomy.id.from=taxonomy.id, taxonomy.name.from=taxonomy.name) %>% left_join(mgnInt, ., by="node_from") #Adding the node_from taxa ID
mgnInt <- dplyr::select(mgnNodes, node_id, taxonomy.id, taxonomy.name) %>% dplyr::rename(., node_to=node_id, taxonomy.id.to=taxonomy.id, taxonomy.name.to=taxonomy.name) %>% left_join(mgnInt, ., by="node_to") #Adding the node_from taxa ID
mgnInt$InterID <- paste(mgnInt$taxonomy.id.from, mgnInt$taxonomy.id.to, sep="-") #Make a column identifying unique from-to combinations
mgIntTaxaFil <- mgnInt %>% dplyr::filter(., grepl("NA", InterID)==FALSE)
InterMangelCounts <- mgIntTaxaFil %>% dplyr::group_by(., InterID) %>% dplyr::summarise(., networks=length(unique(network_id)))
InterMangelCounts
View(InterMangelCounts)
length(unique(mgIntTaxaFil$network_id[mgIntTaxaFil$taxonomy.id.to==5038 & mgIntTaxaFil$taxonomy.id.from!=5031])) #Number of networks including the bee but don't include the morning glory
length(unique(mgIntTaxaFil$network_id[mgIntTaxaFil$taxonomy.id.from==5031 & mgIntTaxaFil$taxonomy.id.to!=5038])) #Number of networks including the morning glory but not the bee
InterMangelCounts
View(mgIntTaxaFil)
LasI <- mgIntTaxaFil %>% dplyr::filter(., taxonomy.name.from=="Lasioglossum incompletum")
mgIntTaxaFil
LasI <- mgIntTaxaFil %>% dplyr::filter(., taxonomy.name.from=="Lasioglossum incompletum" | taxonomy.name.to == "Lasioglossum incompletum")
View(LasI)
ConA <- mgIntTaxaFil %>% dplyr::filter(., taxonomy.name.from=="Convolvulus arvensis" | taxonomy.name.to == "Convolvulus arvensis")
View(ConA)
length(unique(ConA))
length(unique(ConA$network_id))
length(unique(LasI$network_id))
length(unique(ConA$network_id))
View(ConA)
mgn[[1]]
mgn[[1]]$network
mgn[[1]]$dataset
mgn[[1]]$network
mgn[[1]]
mgn[[2]]
mgn[[3]]
mgn[[4]]
mgn[[5]]
mgn[[6]]
mgn[[7]]
mgn[[8]]
mgn[[9]]
mgn[[10]]
mgn[[11]]
nodes <- mgn[[300]]$network
library(mapview)
install.packages("mapview")
library(sf)
library(mapview)
# assuming sf and mapview are is loaded (as we did above)
mg_poll_sf <- search_datasets(query = 'pollinator') %>% get_collection(as_sf = TRUE)
class(mg_poll_sf[[1]]$network)
#> [1] "sf"         "data.frame"
mg_poll_sf
mg_poll_sf[[1]]
class(mg_poll_sf[[1]]$network)
mg_poll_sf[[1]]$network
mg_poll_sf[[1]]$network[[1]]
mg_poll_sf[[1]]$network[[1]]
mg_poll_sf[[1]]
mg_poll_sf[[1]]$network
mg_poll_sf[[1]]$network$geom
unique(ConA$network_id)
ConA_sf <- search_datasets(list(ref_id = unique(ConA$network_id)))
ConA_sf <- search_datasets(list(ref_id = c(unique(ConA$network_id))))
mg_poll_sf[[1]]$network
mg_poll_sf[[1]]$network$network_id
sapply(mg_poll_sf, FUN=[[1]]$nework$network_id)
sapply(mg_poll_sf, FUN=[[1]]$nework$network_id)
mg_poll_sf
[[1]]$nework$network_id
sapply(mg_poll_sf, FUN=[[1]]$nework$network_id)
sapply(mg_poll_sf, FUN=$nework$network_id)
sapply(mg_poll_sf, FUN=$network$network_id)
mg_poll_sf[[1]]$network$network_id
length(mg_poll_sf)
temp <- NULL
for(i in 1:length(mg_poll_sf)){
temp <- rbind(temp, mg_poll_sf[[i]]$network$network_id)
}
View(temp)
spatialIDs <- NULL
for(i in 1:length(mg_poll_sf)){
spatialIDs <- rbind(spatialIDs, mg_poll_sf[[i]]$network$network_id)
}
spatialIDs
for(i in unique(ConA$network_id))
unique(ConA$network_id)[[1]]
unique(ConA$network_id)[[1]]
unique(ConA$network_id)[[1]]
which(unique(ConA$network_id)[[1]]  %in% spatialIDs)
which(unique(ConA$network_id)[[8]]  %in% spatialIDs)
unique(ConA$network_id)[[8]]
spatialIDs
which(unique(ConA$network_id)[[1]]  %in% spatialIDs)
for(i in unique(ConA$network_id)){
which(i  %in% spatialIDs)
}
for(i in unique(ConA$network_id)){
print(which(i  %in% spatialIDs))
}
print(which(i == spatialIDs))
for(i in unique(ConA$network_id)){
print(which(i == spatialIDs))
}
which(i == spatialIDs)
mg_poll_sf[[which(i == spatialIDs)]]$network
temp <- mg_poll_sf[[which(i == spatialIDs)]]$network
temp$network_id
temp$geom
temp <- mg_poll_sf[[which(i == spatialIDs)]]$network$geom
class(temp)
geoms <- list()
geoms <- list()
for(i in unique(ConA$network_id)){
temp <- mg_poll_sf[[which(i == spatialIDs)]]$network$geom
geoms <- c(geoms, temp)
}
View(geoms)
geoms[[1]]
geoms[[2]]
geoms[[3]]
geoms[[4]]
mg_poll_sf[[1]]
mg_poll_sf[[1]]$network$geom
mg_poll_sf[[2]]$network$geom
mg_poll_sf[[2]]$network$geom
x <- mg_poll_sf[[2]]$network$geom
View(x)
x <- mg_poll_sf[[2]]$network$geom[[1]]
x <- mg_poll_sf[[2]]$network$geom[[1]]$POLYGON
mg_poll_sf[[1]]$network$geom
library(ENMTML)
mg_poll_sf[[1]]$network$geom
mg_poll_sf[[2]]$network$geom
class(mg_poll_sf[[1]]$network$geom)
class(mg_poll_sf[[2]]$network$geom)
class(mg_poll_sf[[3]]$network$geom)
LasI
ret <- unique(ConA$network_id)
ret <- unique(ConA$network_id)[i]
i <-1
ret <- unique(ConA$network_id)[i]
unique(ConA$network_id)[i]
length(mg_poll_sf)
mg_poll_sf[[1]]
mg_poll_sf[[1]]$network_id
mg_poll_sf[[1]]$network$network_id
mg_poll_sf[[1]]$network$network_id %in% unique(ConA$network_id)
mg_poll_sf[[2]]$network$network_id %in% unique(ConA$network_id)
mg_poll_sf[[50]]$network$network_id %in% unique(ConA$network_id)
mg_poll_sf[[i]]$network$geom
for(i in length(mg_poll_sf)){
if(mg_poll_sf[[i]]$network$network_id %in% unique(ConA$network_id)){
geoms[[i]]$netID <- mg_poll_sf[[i]]$network$network_id
geoms[[i]]$geom <- mg_poll_sf[[i]]$network$geom
}
}
geoms <- list()
for(i in length(mg_poll_sf)){
if(mg_poll_sf[[i]]$network$network_id %in% unique(ConA$network_id)){
geoms[[i]]$netID <- mg_poll_sf[[i]]$network$network_id
geoms[[i]]$geom <- mg_poll_sf[[i]]$network$geom
}
}
geoms <- list()
for(i in length(mg_poll_sf)){
if(mg_poll_sf[[i]]$network$network_id %in% unique(ConA$network_id)){
geoms[[i]]$netID <- mg_poll_sf[[i]]$network$network_id
geoms[[i]]$geom <- mg_poll_sf[[i]]$network$geom
browser()
}
}
m
n
mg_poll_sf[[i]]$network$network_id %in% unique(ConA$network_id)
i <- 50
mg_poll_sf[[i]]$network$network_id %in% unique(ConA$network_id
)
geoms <- list()
for(i in length(mg_poll_sf)){
if(mg_poll_sf[[i]]$network$network_id %in% unique(ConA$network_id)==TRUE){
geoms[[i]]$netID <- mg_poll_sf[[i]]$network$network_id
geoms[[i]]$geom <- mg_poll_sf[[i]]$network$geom
browser()
}
}
geoms <- list()
for(i in length(mg_poll_sf)){
if(mg_poll_sf[[i]]$network$network_id %in% unique(ConA$network_id)==TRUE){
geoms[[i]]$netID <- mg_poll_sf[[i]]$network$network_id
geoms[[i]]$geom <- mg_poll_sf[[i]]$network$geom
browser()
}
else(){
geoms <- list()
for(i in length(mg_poll_sf)){
if(mg_poll_sf[[i]]$network$network_id %in% unique(ConA$network_id)==TRUE){
geoms[[i]]$netID <- mg_poll_sf[[i]]$network$network_id
geoms[[i]]$geom <- mg_poll_sf[[i]]$network$geom
browser()
}
else{
next
}
}
class(mg_poll_sf[[1]]$network$geom)
class(mg_poll_sf[[2]]$network$geom)
class(mg_poll_sf[[3]]$network$geom)
mg_poll_sf
mg_poll_sf[[i]]$network$network_id
mg_poll_sf[[i]]$network$geom
geoms[[1]]
geoms[[1]]$dat <- full
geoms[[1]] <- 1
View(geoms)
geoms <- list()
for(i in length(mg_poll_sf)){
if(mg_poll_sf[[i]]$network$network_id %in% unique(ConA$network_id)==TRUE){
geoms[[i]] <- NA
geoms[[i]]$netID <- mg_poll_sf[[i]]$network$network_id
geoms[[i]]$geom <- mg_poll_sf[[i]]$network$geom
browser()
}
else{
geoms[[i]] <- "not present"
next
}
}
View(geoms)
geoms
geoms
geoms[[1]]
geoms[[1]]
geoms[[1]]
mg_poll_sf[[i]]$network$network_id
mg_poll_sf[[i]]$network$network_id %in% unique(ConA$network_id
mg_poll_sf[[i]]$network$network_id
i <- 50
mg_poll_sf[[i]]$network$network_id
geoms[[i]]$netID <- mg_poll_sf[[i]]$network$network_id
geoms[[i]]$geom <- mg_poll_sf[[i]]$network$geom
geoms[[i]]$geom
geoms
mg_poll_sf[[i]]$network$network_id %in% unique(ConA$network_id
)
geoms <- list()
for(i in length(mg_poll_sf)){
if(mg_poll_sf[[i]]$network$network_id %in% unique(ConA$network_id)==TRUE){
print("True")
geoms[[i]]$netID <- mg_poll_sf[[i]]$network$network_id
geoms[[i]]$geom <- mg_poll_sf[[i]]$network$geom
browser()
}
else{
geoms[[i]] <- "not present"
next
}
}
geoms[[1]]
knitr::opts_chunk$set(echo = TRUE)
load(file="data/climate/env.RData")
View(env)
plot(env)
head(env.df)
knitr::opts_chunk$set(echo = TRUE)
library(igraph)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(rgbif)
library(curl)
library(BIEN)
library(maps)
library(sf)
sf_use_s2(FALSE)
library(terra)
library(maps)
library(data.table)
library(geodata)
#library(rangeBuilder) #For creating alpha hulls #Edit: This is a good approach, but takes way too long.
library(alphahull)
#Erase later-only for debugging
library(tictoc)
library(exactextractr)
library(geosphere)
library(hypervolume)
load("data/MetaWebCentrality.Rda") #Load in Global Metaweb
metaCent$biennm <- gsub(pattern=" ", replacement="_",   metaCent$node) #Make name convention same a bien
Clima <- geodata::worldclim_global("worldclim", var="bio", res=5)
tic()
clovdat$cells <- terra::cellFromXY(Clima, xy=clovdat[,5:4])
wadmin <- geodata::world(resolution = 5, level =0, path="data/climate") #Download world administrative boundaries
ccs <- geodata::country_codes() #get country codes-includes continent key
wadminrast <- terra::rasterize(wadmin, Clima, field="GID_0") #
#tictoc::tic()
#nms <- terra::extract(wadmin, y=indcells[,5:4]) #Assign each point in clovsmall to an admin boundary
#indcells$ISO3 <- nms$GID_0 #Assign country name code
#tictoc::toc()
#colnames(ccs)
indcells$ISO3 <- wadminrast[indcells$cells]$GID_0
fls <- list.files(path="data/GBIF/occs/")
nms <- gsub("_", " ", fls) %>% gsub(".csv", "", .)
nms <- paste(toupper(substr(nms, 1,1)), substr(nms,2,100), sep="")
missing <- metaCent[metaCent$node %in% nms==FALSE,]
dat <- metaCent[metaCent$node %in% nms==TRUE,]
dat$flnm <- paste(gsub(" ", "_", tolower(dat$node)),".csv", sep="")
tictoc::tic()
temp <- dat[595,]
filtemp <- paste("data/GBIF/occs/", temp$flnm, sep="") #set up temp filename
tempdat <- read.csv(file=filtemp) #read in file
tempdat$cells <- terra::cellFromXY(Clima, xy=tempdat[,5:4]) #Grab the cell ids
indcells <- tempdat %>% dplyr::group_by(., cells) %>% dplyr::slice_sample(n = 1) #remove redundant cells (randomly choose 1 point)
indcells$ISO3 <- wadminrast[indcells$cells]$GID_0 #grab country ID
indcells <- ccs %>% dplyr::select(., ISO3, continent) %>% left_join(indcells, ., by=c("ISO3")) #Grab continent
points <- dplyr::filter(indcells, continent=="South America")
indcells$cells
env.df
table(indcells$cells %in% load(rownames(env.df)))
table(indcells$cells %in% rownames(env.df))
env$fpcat.PC1
Clima
Clima
env$fpcat.PC1
from <- terra::cellFromXY(env, points[,5:4])
points[,5:4]
Clima
View(envRast)
View(env2)
View(env.df)
env
cellFromXY(env, xy=points[,5:4])
points[,5:4]
cellFromXY(env, xy=points[,5:4])
?cellfromXY
from <- terra::cellFromXY(env, xy=tempdat[,5:4])
tempdat
from <- terra::cellFromXY(env, xy=points[,5:4])
tempdat[,5:4]
points[,5:4]
tempdat[,5:4]
points[,5:4]
tempdat[,5:4]
points[,5:4]
from <- terra::cellFromXY(env, xy=points[,5:4])
from <- terra::cellFromXY(env, xy=tempdat[,5:4])
from
tempdat[,5:4]
points[,5:4]
points[,5:4]
from <- terra::cellFromXY(env, xy=tempdat[,5:4])
from <- terra::cellFromXY(env, xy=points[,5:4])
tempdat[,5:4]
points[,5:4]
from <- terra::cellFromXY(env, xy=points[,5:4])
is.numeric(points[,5:4])
table(is.numeric(points[,5:4]))
table(is.numeric(points[,5]))
points[,5]
table(is.numeric(tempdat[,5]))
points
cellFromXY(env, xy=as.numeric(points[,5:4]))
as.numeric(points[,5:4])
cellFromXY(env, xy=as.numeric(points[,5]))
as.numeric(points[,5])
points$decimalLatitude <- as.numeric(points$decimalLatitude)
points$decimalLongitude <- as.numeric(points$decimalLongitude)
from <- terra::cellFromXY(env, xy=points[,5:4])
from <- terra::cellFromXY(env, xy=points[,5:4])
is.na(points$decimalLatitude)
table(is.na(points$decimalLatitude))
table(is.numeric(points$decimalLatitude))
is.numeric(points$decimalLatitude)
points$decimalLatitude
s.numeric(points$decimalLatitude)
table(is.numeric(temp$decimalLatitude))
temp$decimalLatitude
table(is.numeric(tempdat$decimalLatitude))
is.numeric(tempdat$decimalLatitude)
table(is.na(tempdat$decimalLatitude))
tempdat[,5:4]
points[,5:4]
from <- terra::cellFromXY(env, xy=points[,5:4])
from <- terra::cellFromXY(env, xy=as.matrix(points[,5:4]))
from
points$envCell <- terra::cellFromXY(env, xy=as.matrix(points[,5:4]))
points$envCell
table(points$envCell %in% env.df)
table(head(points$envCell) %in% env.df)
